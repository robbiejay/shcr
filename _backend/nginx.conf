
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        off;
    tcp_nopush on;
    # aio on; not supported without recompiling
    directio 512;


    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

server {
listen 80 default_server;
server_name _;
return 301 https://$host$request_uri;
}

    server {

        listen       443 ssl;

      #  return 301 https://$host$request_uri;

        ssl_certificate    /etc/letsencrypt/live/hkcr.live/fullchain.pem;
        ssl_certificate_key    /etc/letsencrypt/live/hkcr.live/privkey.pem;


        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        server_name  hkcr.live www.hkcr.live;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

       location / {

        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header   Host             $host;
        proxy_pass http://localhost:4000;

        proxy_redirect http://localhost:4000 https://hkcr.live;
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      #  try_files $uri $uri/ /index.html;
     }

        location /api/ {

        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header   Host             $host;
        proxy_pass http://localhost:4000;

        proxy_redirect http://localhost:3000 https://hkcr.live/api;
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        }

        location /blog {
            try_files $uri $uri/ /index.html;
        }

        location /wp_api/data {
          if ($request_method = 'OPTIONS') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain; charset=utf-8';
          add_header 'Content-Length' 0;
          return 204;
          }

          default_type 'application/json';
          add_header 'Access-Control-Allow-Origin' '*' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
          add_header 'Content-Type' 'application/json';
          if ($request_uri ~* "([^/]*$)" ) {
          set  $last_path_component  $1;
          }

          try_files $last_path_component.json $last_path_component.json =404;
          }



        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #


        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
        location /hls {
           # Disable cache
           add_header Cache-Control no-cache;

           # CORS setup
           add_header 'Access-Control-Allow-Origin' '*' always;
           add_header 'Access-Control-Expose-Headers' 'Content-Length';

           # allow CORS preflight requests
           if ($request_method = 'OPTIONS') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Max-Age' 1728000;
               add_header 'Content-Type' 'text/plain charset=UTF-8';
               add_header 'Content-Length' 0;
               return 204;
           }
       }

       location /audio {
       # Disable cache
       add_header Cache-Control no-cache;

       # CORS setup
       add_header 'Access-Control-Allow-Origin' '*' always;
       add_header 'Access-Control-Expose-Headers' 'Content-Length';

       # allow CORS preflight requests
       if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Max-Age' 1728000;
           add_header 'Content-Type' 'text/plain charset=UTF-8';
           add_header 'Content-Length' 0;
           return 204;
       }
       }

       location /dash {
          # Disable cache
          add_header Cache-Control no-cache;

          # CORS setup
          add_header 'Access-Control-Allow-Origin' '*' always;
          add_header 'Access-Control-Expose-Headers' 'Content-Length';

          # allow CORS preflight requests
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain charset=UTF-8';
              add_header 'Content-Length' 0;
              return 204;
          }
      }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

rtmp {
        server {
                listen 1935;
                chunk_size 4096;
                application live {
                        live on;
                        hls on;
                        hls_fragment 6s;
                        hls_playlist_length 60s;
                        hls_sync 100ms;
                        hls_continuous on;
                        hls_path /usr/local/nginx/html/hls;

                      #  dash on;
                      #  dash_path /usr/local/nginx/html/dash;

      #                  exec ffmpeg -i rtmp://161.35.20.148/$app/$name -async 1 -vsync -1
      #      -c:v libx264 -c:a libvo_aacenc -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://161.35.20.148/hls/$name_low
      #      -c:v libx264 -c:a libvo_aacenc -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://161.35.20.148/hls/$name_mid
      #      -c:v libx264 -c:a libvo_aacenc -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://161.35.20.148/hls/$name_high
      #      -c:v libx264 -c:a libvo_aacenc -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://161.35.20.148/hls/$name_hd720;
      #      -c copy -f flv rtmp://161.35.20.148/hls/$name_src

                        # exec ffmpeg -re -i rtmp://161.35.20.148/$app/$name  -vn -acodec copy -f mp3 /usr/local/nginx/html/audio/out.mp3;
                        exec ffmpeg -re -i rtmp://161.35.20.148/$app/$name -vn -acodec copy -f flv rtmp://161.35.20.148/audio;
                        # exec ffmpeg -re -i rtmp://161.35.20.148/$app/$name -vn -acodec copy -f flv /usr/local/nginx/html/audio/out.flv;


                }

                application vod {
                      play /usr/local/nginx/html/audio;
                }

                application audio {
                    live on;
                    hls on;
                    hls_nested on;
                    hls_fragment 3;
                    hls_playlist_length 60;
                    hls_sync 100ms;
                    hls_continuous on;
                    hls_path /usr/local/nginx/html/audio;

                    # recorder audio {
                    # record audio;
                    # record_path /usr/local/nginx/html/audio/recordings;
                    # record_suffix -%d-%b-%y-%T.flv;
                    # }
                    # exec ffmpeg -i /hls/test.m3u8 -vn -acodec copy /audio/radio.mp3

                }

            #    application hls {

            #    live on;
            #    hls on;
            #    hls_fragment 3;
            #    hls_playlist_length 60;
            #    hls_sync 100ms;
            #   hls_continuous on;
              #  hls_path /usr/local/nginx/html/hls;
            #    hls_variant _low BANDWIDTH=288000;
            #    hls_variant _mid BANDWIDTH=448000;
            #    hls_variant _high BANDWIDTH=1152000;
            #    hls_variant _hd720 BANDWIDTH=2048000;
            #    hls_variant _src BANDWIDTH=4096000;
            #    }
        }
}
